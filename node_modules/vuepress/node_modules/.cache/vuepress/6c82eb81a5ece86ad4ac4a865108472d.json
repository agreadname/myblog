{"remainingRequest":"G:\\full\\myBolg\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!G:\\full\\myBolg\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!G:\\full\\myBolg\\docs\\router\\README.md?vue&type=template&id=f28360e2&","dependencies":[{"path":"G:\\full\\myBolg\\docs\\router\\README.md","mtime":1551323536883},{"path":"G:\\full\\myBolg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545827198486},{"path":"G:\\full\\myBolg\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1545827200284},{"path":"G:\\full\\myBolg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545827198486},{"path":"G:\\full\\myBolg\\node_modules\\vue-loader\\lib\\index.js","mtime":1545827200284},{"path":"G:\\full\\myBolg\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1551338590531}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"快速配置\"><a class=\"header-anchor\" href=\"#快速配置\" aria-hidden=\"true\">#</a> 快速配置</h2>\n<ul>\n<li>这个路由的注册方式基本没有改变过，就增加了一个非菜单路由的注册</li>\n</ul>\n<h4 id=\"_1-src-文件夹的-router-basic-js\"><a class=\"header-anchor\" href=\"#_1-src-文件夹的-router-basic-js\" aria-hidden=\"true\">#</a> 1. src 文件夹的 router/basic.js</h4>\n<ul>\n<li>注册基础路由,不用控制权限的路由都在这里注册，如登陆,注册，公共页面等等界面，这个是正常的路由注册文件</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'login'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'@layout/login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>这里是控制权限的路由配置，颗粒度到某个按钮</li>\n</ul>\n<h4 id=\"_2-src-文件夹的-router-dynamic-js\"><a class=\"header-anchor\" href=\"#_2-src-文件夹的-router-dynamic-js\" aria-hidden=\"true\">#</a> 2.src 文件夹的 router/dynamic.js</h4>\n<p><strong>权限路由是动态加载的</strong></p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">只有一级菜单的路由注册</p>\n<ol>\n<li>id 为后端发送的菜单字符串进行匹配的关键词</li>\n<li>data 是正常的路由注册内容</li>\n<li>redirect 必须写上，统一重定向到完整路径 <code>/home/index</code></li>\n<li>children 路径统一为 index</li>\n</ol>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>\n   <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/town'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'town'</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> Layout<span class=\"token punctuation\">,</span><span class=\"token comment\">//这个默认不变的主界面组件（头部，侧边栏等）</span>\n      redirect<span class=\"token punctuation\">:</span> to <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"/town/index\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'town_index'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//</span>\n        component<span class=\"token punctuation\">:</span> Town<span class=\"token punctuation\">,</span><span class=\"token comment\">//对应中间区域的组件</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">有二级菜单的路由注册</p>\n<ol>\n<li>id 为后端发送的菜单字符串进行匹配的关键词</li>\n<li>data 是正常的路由注册内容</li>\n<li>redirect 必须写上，统一重定向到完整路径 <code>/form/form1</code></li>\n<li>父子路由分开写，不要嵌套到<code>children</code>里面，这个很重要，这个文件是要和后端给的菜单字符串进行对比合并成真正的路由，不要写成<strong>树形结构</strong>，要写成<strong>链式结构</strong></li>\n</ol>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">//父组件注册</span>\n<span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/form'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span>component<span class=\"token punctuation\">:</span> Layout<span class=\"token punctuation\">,</span>\n  redirect<span class=\"token punctuation\">:</span> to <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"/form/form1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//重定位要写上，可以重定位到第一个也可以第二个</span>\n  children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token comment\">//这里的不写</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//form的两个子路由</span>\n<span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">:</span> <span class=\"token string\">'form1'</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'form1'</span><span class=\"token punctuation\">,</span>component<span class=\"token punctuation\">:</span> Form1<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">:</span> <span class=\"token string\">'form2'</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'form2'</span><span class=\"token punctuation\">,</span>component<span class=\"token punctuation\">:</span> Form2<span class=\"token punctuation\">,</span>children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_3-src-文件夹的-router-nomenu-js\"><a class=\"header-anchor\" href=\"#_3-src-文件夹的-router-nomenu-js\" aria-hidden=\"true\">#</a> 3.src 文件夹的 router/nomenu.js</h4>\n<p><em>（例子可以看底包侧边栏的表格=》【to other URL】 ）</em></p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">受到权限限制的非菜单栏路由</p>\n<ol>\n<li><code>fid</code>为相应的菜单栏的 id 比如菜单栏的表格 id 为 9，对应的 fid 为 9</li>\n<li><code>meta</code> 元信息写上<code>title</code>，即 tag 标签要显示的文字</li>\n<li>注意路径不用<code>\\</code></li>\n</ol>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>  <span class=\"token punctuation\">{</span>\n    fid<span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">\"other\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//要注意不用/</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"other\"</span><span class=\"token punctuation\">,</span>\n        component<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/other'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        meta<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'其他'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//很重要</span>\n        children<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"mock-菜单权限字符串\"><a class=\"header-anchor\" href=\"#mock-菜单权限字符串\" aria-hidden=\"true\">#</a> Mock-菜单权限字符串</h2>\n<h4 id=\"导航权限路由-src-文件夹的-mock-login-js-文件\"><a class=\"header-anchor\" href=\"#导航权限路由-src-文件夹的-mock-login-js-文件\" aria-hidden=\"true\">#</a> 导航权限路由 src 文件夹的 mock/login.js 文件</h4>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">需配置</p>\n<p>用 mock 直接模拟获取权限菜单，有后端数据时直接修改请求地址即可，导航权限数据格式如下:\n记得是个 json 字符串</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*json模拟后端传递数据,后端传json标题来控制权限,决定菜单栏显示内容的地方*/</span>\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`[\n    {//一级\n        \"id\": 1,\n        \"title\": \"首页\",\n        \"child\": [],\n        \"icon\": \"dc-icon-iospaperoutline\"\n    },\n    {//有二级的\n        \"id\": 2,\n        \"title\": \"表单\",\n        \"icon\": \"dc-icon-iosbolt\",\n        \"child\": [\n            {\n                \"id\": 3,\n                \"title\": \"表单组件一\",\n                \"icon\": \"dc-icon-androidexi\",\n                \"child\": []\n            },\n            {\n                \"id\": 4,\n                \"title\": \"表单组件二\",\n                \"icon\": \"dc-icon-database\",\n                \"child\": []\n            }\n        ]\n    }\n]`</span></span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><blockquote>\n<p>到了这里，基本就可以正常使用了，下面是路由相关底层文件的说明，不看不影响使用</p>\n</blockquote>\n<h2 id=\"补充说明\"><a class=\"header-anchor\" href=\"#补充说明\" aria-hidden=\"true\">#</a> 补充说明</h2>\n<h4 id=\"_1-src-文件夹的-library-router-dyroute-js\"><a class=\"header-anchor\" href=\"#_1-src-文件夹的-library-router-dyroute-js\" aria-hidden=\"true\">#</a> 1.src 文件夹的 library/router/dyroute.js</h4>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">基本不用改变</p>\n<p>动态添加路由封装函数在这个文件，基本不用改变，可不看，需要动态添加路由的地方，引起这个文件，导出 addDynamic 函数</p>\n</div>\n<ol>\n<li>作用</li>\n</ol>\n<ul>\n<li>将后端给的菜单字符串和本地注册的路由表进行合并形成真正的路由表</li>\n</ul>\n<ol start=\"2\">\n<li>思路</li>\n</ol>\n<ul>\n<li>将后端给的<a href=\"#mock-%E8%8F%9C%E5%8D%95%E6%9D%83%E9%99%90%E5%AD%97%E7%AC%A6%E4%B8%B2\">菜单字符串</a>存于 sessionstorage,key 值为<code>Getjson</code></li>\n<li>addDynamic 函数将获取的菜单字符串用双层循环进行遍历匹配 id，如果 id 相同则将路由信息 push 进路由变量<code>routerString</code>和菜单栏变量<code>nav</code></li>\n<li>用 route 动态添加路由的 api 将处理好的<code>routerString</code> push 进去</li>\n<li>用 export 抛出一个 promise 对象，解决异步问题，等路由加载完毕再执行路由跳转或者其他业务逻辑</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">//路由加载完毕，目前这个函数在login.js和main.js这两个地方使用</span>\n<span class=\"token function\">addDynamic</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//业务代码</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/home/index\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ol start=\"3\">\n<li>\n<p>用法</p>\n<ul>\n<li>在需要动态加载权限路由的地方<code>import {addDynamic} from &quot;@/library/router/dyroute.js&quot;;</code></li>\n<li>在 sessionStorage 或者请求获取菜单字符串 json,<code>addDynamic(json).then(()=&gt;{//业务代码})</code></li>\n</ul>\n<p><em>后期改成 addDynamic 递归写法，包括左侧菜单栏，上次测试过 element 的菜单栏用递归写法，收缩时有 bug，在 GitHub 提了 issue，看他们是否解决了</em></p>\n</li>\n</ol>\n<h4 id=\"_2-src-文件夹的-library-router-index-js\"><a class=\"header-anchor\" href=\"#_2-src-文件夹的-library-router-index-js\" aria-hidden=\"true\">#</a> 2.src 文件夹的 library/router/index.js</h4>\n<h5 id=\"作用\"><a class=\"header-anchor\" href=\"#作用\" aria-hidden=\"true\">#</a> 作用</h5>\n<ol>\n<li>注册基础路由</li>\n<li>添加路由守卫</li>\n</ol>\n<ul>\n<li>判断是否未登陆页，是则清除缓存，否则进入下一判断</li>\n<li>判断是否登陆<code>isLogin</code> 未登陆，重定位到登录页，并清除缓存</li>\n<li>已登陆：判断是否为未注册路由，是则重定位到 404 页面，否则</li>\n<li>判断是否为首页，是则直接进入页面，否则</li>\n<li>处理 Tag 和面包屑，判断是否已经存在当前路由的<code>Tag</code>，已经存在则修改面包屑并进入页面</li>\n<li>否则添加<code>Tag</code>,修改面包屑并进入页面\n<em>在合并路由过程中，meta 元信息已经将二级路由的上级路由信息存入字段 father 中，为了解决面包屑问题</em></li>\n</ul>\n</div>\n",null]}