{"remainingRequest":"H:\\full\\myBolg\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!H:\\full\\myBolg\\docs\\.vuepress\\components\\verifychip\\constructor.js","dependencies":[{"path":"H:\\full\\myBolg\\docs\\.vuepress\\components\\verifychip\\constructor.js","mtime":1551345207155},{"path":"H:\\full\\myBolg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545827198486},{"path":"H:\\full\\myBolg\\node_modules\\babel-loader\\lib\\index.js","mtime":1551338590818}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.reduce\";\nimport \"core-js/modules/es6.object.assign\";\nimport _classCallCheck from \"H:\\\\full\\\\myBolg\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"H:\\\\full\\\\myBolg\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/createClass\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.array.index-of\";\n//canvas拼图构造器\nvar l = 42,\n    // 滑块边长\nr = 9,\n    // 滑块半径\nw = 310,\n    // canvas宽度\nh = 155,\n    // canvas高度\nPI = Math.PI;\nvar _url = \"\";\nvar L = l + r * 2 + 3; // 滑块实际边长\n\nvar isIE = window.navigator.userAgent.indexOf(\"Trident\") > -1; //随机数\n\nfunction getRandomNumberByRange(start, end) {\n  return Math.round(Math.random() * (end - start) + start);\n} //创作canvas标签\n\n\nfunction createCanvas(width, height) {\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n} //加载图片\n\n\nfunction createImg(onload) {\n  var img = new Image();\n  img.crossOrigin = \"Anonymous\";\n  img.onload = onload;\n\n  img.onerror = function () {\n    img.setSrc(getRandomImgSrc());\n  };\n\n  img.setSrc = function (src) {\n    if (isIE) {\n      // IE浏览器无法通过img.crossOrigin跨域，使用ajax获取图片blob然后转为dataURL显示\n      var xhr = new XMLHttpRequest();\n\n      xhr.onloadend = function (e) {\n        var file = new FileReader(); // FileReader仅支持IE10+\n\n        file.readAsDataURL(e.target.response);\n\n        file.onloadend = function (e) {\n          img.src = e.target.result;\n        };\n      };\n\n      xhr.open(\"GET\", src);\n      xhr.responseType = \"blob\";\n      xhr.send();\n    } else img.src = src;\n  };\n\n  img.setSrc(getRandomImgSrc());\n  return img;\n}\n\nfunction createElement(tagName, className) {\n  var elment = document.createElement(tagName);\n  elment.className = className;\n  return elment;\n}\n\nfunction addClass(tag, className) {\n  tag.classList.add(className);\n}\n\nfunction removeClass(tag, className) {\n  tag.classList.remove(className);\n} //获取图片路径\n\n\nfunction getRandomImgSrc() {\n  return _url;\n} //用到上面定义内容\n\n\nfunction _draw(ctx, x, y, operation) {\n  ctx.beginPath();\n  ctx.moveTo(x, y);\n  ctx.arc(x + l / 2, y - r + 2, r, 0.72 * PI, 2.26 * PI);\n  ctx.lineTo(x + l, y);\n  ctx.arc(x + l + r - 2, y + l / 2, r, 1.21 * PI, 2.78 * PI);\n  ctx.lineTo(x + l, y + l);\n  ctx.lineTo(x, y + l);\n  ctx.arc(x + r - 2, y + l / 2, r + 0.4, 2.76 * PI, 1.24 * PI, true);\n  ctx.lineTo(x, y);\n  ctx.lineWidth = 2;\n  ctx.fillStyle = \"rgba(255, 255, 255, .9)\";\n  ctx.strokeStyle = \"rgba(255, 255, 255, .9)\";\n  ctx.stroke();\n  ctx[operation]();\n  ctx.globalCompositeOperation = isIE ? \"xor\" : \"overlay\";\n}\n\nfunction sum(x, y) {\n  return x + y;\n}\n\nfunction square(x) {\n  return x * x;\n} //判断是否为数组\n\n\nfunction _isArray(arg) {\n  if (!Array.isArray) {\n    Array.isArray = function (arg) {\n      return Object.prototype.toString.call(arg) === \"[object Array]\";\n    };\n  } else {\n    return Array.isArray(arg);\n  }\n} //定义类\n\n\nvar Tkstree =\n/*#__PURE__*/\nfunction () {\n  function Tkstree(_ref) {\n    var el = _ref.el,\n        onSuccess = _ref.onSuccess,\n        onFail = _ref.onFail,\n        onRefresh = _ref.onRefresh,\n        url = _ref.url,\n        images = _ref.images;\n\n    _classCallCheck(this, Tkstree);\n\n    el.style.position = \"relative\";\n    el.style.width = w + \"px\";\n    Object.assign(el.style, {\n      position: \"relative\",\n      width: w + \"px\" // margin: '0 auto'\n\n    });\n    this.el = el;\n    this.onSuccess = onSuccess;\n    this.onFail = onFail;\n    this.onRefresh = onRefresh;\n    _url = url;\n  }\n\n  _createClass(Tkstree, [{\n    key: \"init\",\n    value: function init() {\n      this.initDOM();\n      this.initImg();\n      this.bindEvents();\n    }\n  }, {\n    key: \"initDOM\",\n    value: function initDOM() {\n      var canvas = createCanvas(w, h); // 画布\n\n      var block = canvas.cloneNode(true); // 滑块\n\n      var sliderContainer = createElement(\"div\", \"sliderContainer\");\n      var refreshIcon = createElement(\"div\", \"refreshIcon\");\n      var sliderMask = createElement(\"div\", \"sliderMask\");\n      var slider = createElement(\"div\", \"slider\");\n      var sliderIcon = createElement(\"span\", \"sliderIcon\");\n      var text = createElement(\"span\", \"sliderText\");\n      block.className = \"block\";\n      text.innerHTML = \"向右滑动填充拼图\";\n      var el = this.el;\n      el.appendChild(canvas);\n      el.appendChild(refreshIcon);\n      el.appendChild(block);\n      slider.appendChild(sliderIcon);\n      sliderMask.appendChild(slider);\n      sliderContainer.appendChild(sliderMask);\n      sliderContainer.appendChild(text);\n      el.appendChild(sliderContainer);\n      Object.assign(this, {\n        canvas: canvas,\n        block: block,\n        sliderContainer: sliderContainer,\n        refreshIcon: refreshIcon,\n        slider: slider,\n        sliderMask: sliderMask,\n        sliderIcon: sliderIcon,\n        text: text,\n        canvasCtx: canvas.getContext(\"2d\"),\n        blockCtx: block.getContext(\"2d\")\n      });\n    }\n  }, {\n    key: \"initImg\",\n    value: function initImg() {\n      var _this = this;\n\n      var img = createImg(function () {\n        _this.draw();\n\n        _this.canvasCtx.drawImage(img, 0, 0, w, h);\n\n        _this.blockCtx.drawImage(img, 0, 0, w, h);\n\n        var y = _this.y - r * 2 - 1;\n\n        var ImageData = _this.blockCtx.getImageData(_this.x - 3, y, L, L);\n\n        _this.block.width = L;\n\n        _this.blockCtx.putImageData(ImageData, 0, y);\n      });\n      this.img = img;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      // 随机创建滑块的位置\n      this.x = getRandomNumberByRange(L + 10, w - (L + 10));\n      this.y = getRandomNumberByRange(10 + r * 2, h - (L + 10));\n\n      _draw(this.canvasCtx, this.x, this.y, \"fill\");\n\n      _draw(this.blockCtx, this.x, this.y, \"clip\");\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.canvasCtx.clearRect(0, 0, w, h);\n      this.blockCtx.clearRect(0, 0, w, h);\n      this.block.width = w;\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      var _this2 = this;\n\n      this.el.onselectstart = function () {\n        return false;\n      };\n\n      this.refreshIcon.onclick = function () {\n        _this2.reset();\n\n        typeof _this2.onRefresh === \"function\" && _this2.onRefresh();\n      };\n\n      var originX,\n          originY,\n          trail = [],\n          isMouseDown = false;\n\n      var handleDragStart = function handleDragStart(e) {\n        originX = e.clientX || e.touches[0].clientX;\n        originY = e.clientY || e.touches[0].clientY;\n        isMouseDown = true;\n      };\n\n      var handleDragMove = function handleDragMove(e) {\n        if (!isMouseDown) return false;\n        var eventX = e.clientX || e.touches[0].clientX;\n        var eventY = e.clientY || e.touches[0].clientY;\n        var moveX = eventX - originX;\n        var moveY = eventY - originY;\n        if (moveX < 0 || moveX + 38 >= w) return false;\n        _this2.slider.style.left = moveX + \"px\";\n        var blockLeft = (w - 40 - 20) / (w - 40) * moveX;\n        _this2.block.style.left = blockLeft + \"px\";\n        addClass(_this2.sliderContainer, \"sliderContainer_active\");\n        _this2.sliderMask.style.width = moveX + \"px\";\n        trail.push(moveY);\n      };\n\n      var handleDragEnd = function handleDragEnd(e) {\n        if (!isMouseDown) return false;\n        isMouseDown = false;\n        var eventX = e.clientX || e.changedTouches[0].clientX;\n        if (eventX == originX) return false;\n        removeClass(_this2.sliderContainer, \"sliderContainer_active\");\n        _this2.trail = trail;\n\n        var _this2$verify = _this2.verify(),\n            spliced = _this2$verify.spliced,\n            verified = _this2$verify.verified;\n\n        if (spliced) {\n          if (verified) {\n            addClass(_this2.sliderContainer, \"sliderContainer_success\");\n            typeof _this2.onSuccess === \"function\" && _this2.onSuccess();\n          } else {\n            addClass(_this2.sliderContainer, \"sliderContainer_fail\");\n            _this2.text.innerHTML = \"再试一次\";\n\n            _this2.reset();\n          }\n        } else {\n          addClass(_this2.sliderContainer, \"sliderContainer_fail\");\n          typeof _this2.onFail === \"function\" && _this2.onFail();\n          setTimeout(function () {\n            _this2.reset();\n          }, 1000);\n        }\n      };\n\n      this.slider.addEventListener(\"mousedown\", handleDragStart);\n      this.slider.addEventListener(\"touchstart\", handleDragStart);\n      document.addEventListener(\"mousemove\", handleDragMove);\n      document.addEventListener(\"touchmove\", handleDragMove);\n      document.addEventListener(\"mouseup\", handleDragEnd);\n      document.addEventListener(\"touchend\", handleDragEnd);\n    }\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var arr = this.trail; // 拖动时y轴的移动距离\n\n      var average = arr.reduce(sum) / arr.length;\n      var deviations = arr.map(function (x) {\n        return x - average;\n      });\n      var stddev = Math.sqrt(deviations.map(square).reduce(sum) / arr.length);\n      var left = parseInt(this.block.style.left);\n      return {\n        spliced: Math.abs(left - this.x) < 10,\n        verified: stddev !== 0 // 简单验证下拖动轨迹，为零时表示Y轴上下没有波动，可能非人为操作\n\n      };\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.sliderContainer.className = \"sliderContainer\";\n      this.slider.style.left = 0;\n      this.block.style.left = 0;\n      this.sliderMask.style.width = 0;\n      this.clean();\n      this.img.setSrc(getRandomImgSrc());\n    }\n  }]);\n\n  return Tkstree;\n}();\n\nvar _canvas = {\n  init: function init(opts) {\n    return new Tkstree(opts).init();\n  }\n};\nexport { _canvas };",null]}